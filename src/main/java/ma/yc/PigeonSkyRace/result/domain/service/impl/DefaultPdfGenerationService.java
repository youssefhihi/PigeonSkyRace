package ma.yc.PigeonSkyRace.result.domain.service.impl;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import lombok.extern.slf4j.Slf4j;
import ma.yc.PigeonSkyRace.result.application.dto.response.ResultResponseDto;
import ma.yc.PigeonSkyRace.result.domain.service.PdfGenerationService;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Slf4j
@Service
public class DefaultPdfGenerationService implements PdfGenerationService {

    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    @Override
    public byte[] generateResultsPdf ( List<ResultResponseDto> results ) throws DocumentException {
        if (results == null || results.isEmpty()) {
            throw new IllegalArgumentException("Results list cannot be null or empty");
        }

        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            Document document = new Document(PageSize.A4, 36, 36, 54, 36); // margins
            PdfWriter writer = PdfWriter.getInstance(document, outputStream);

            document.open();
            addMetadata(document);
            addContent(document, results);
            document.close();

            return outputStream.toByteArray();
        } catch (Exception e) {
            log.error("Error generating PDF: ", e);
            throw new DocumentException("Failed to generate PDF: " + e.getMessage());
        }
    }

    private void addMetadata ( Document document ) {
        document.addTitle("Pigeon Race Results");
        document.addAuthor("Pigeon Sky Race System");
        document.addCreator("Pigeon Sky Race Application");
        document.addSubject("Race Results Report");
    }

    private void addContent ( Document document, List<ResultResponseDto> results ) throws DocumentException {
        Font titleFont = new Font(Font.FontFamily.HELVETICA, 20, Font.BOLD, BaseColor.DARK_GRAY);
        Paragraph title = new Paragraph("Pigeon Race Results", titleFont);
        title.setAlignment(Element.ALIGN_CENTER);
        title.setSpacingAfter(25);
        document.add(title);

        Font summaryFont = new Font(Font.FontFamily.HELVETICA, 12);
        Paragraph summary = new Paragraph(String.format("Total Participants: %d", results.size()), summaryFont);
        summary.setSpacingAfter(20);
        document.add(summary);

        document.add(createResultsTable(results));

        Font footerFont = new Font(Font.FontFamily.HELVETICA, 8, Font.ITALIC);
        Paragraph footer = new Paragraph("Generated by Pigeon Sky Race System", footerFont);
        footer.setAlignment(Element.ALIGN_CENTER);
        footer.setSpacingBefore(20);
        document.add(footer);
    }

    private PdfPTable createResultsTable ( List<ResultResponseDto> results ) throws DocumentException {
        PdfPTable table = new PdfPTable(6);
        table.setWidthPercentage(100);
        table.setSpacingBefore(10);

        float[] columnWidths = {2f, 2f, 2f, 1.5f, 2.5f,2f};
        table.setWidths(columnWidths);

        Font headerFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD, BaseColor.WHITE);
        BaseColor headerBackground = new BaseColor(51, 122, 183);

        addTableHeader(table, "Loft", headerFont, headerBackground);
        addTableHeader(table, "Band Number", headerFont, headerBackground);
        addTableHeader(table, "Distance (km)", headerFont, headerBackground);
        addTableHeader(table, "Speed (m/min)", headerFont, headerBackground);
        addTableHeader(table, "Points", headerFont, headerBackground);
        addTableHeader(table, "Arrival Time", headerFont, headerBackground);

        Font dataFont = new Font(Font.FontFamily.HELVETICA, 10);
        BaseColor alternateBackground = new BaseColor(245, 245, 245);

        for (int i = 0; i < results.size(); i++) {
            ResultResponseDto result = results.get(i);
            BaseColor background = (i % 2 == 0) ? BaseColor.WHITE : alternateBackground;

            addTableCell(table, result.loft() != null ? result.loft().toString() : "N/A", dataFont, background);
            addTableCell(table, result.bandNumber() != null ? result.bandNumber().value() : "N/A", dataFont, background);
            addTableCell(table, result.distance() != null ? String.format("%.2f", result.distance()) : "0.00", dataFont, background);
            addTableCell(table, result.speed() != null ? String.format("%.2f", result.speed()) : "0.00", dataFont, background);
            addTableCell(table, result.points() != null ? String.format("%.2f", result.points()) : "0.00", dataFont, background);
            addTableCell(table, result.dateArrival() != null ? result.dateArrival().format(DATE_FORMATTER) : "N/A", dataFont, background);

        }

        return table;
    }

    private void addTableHeader ( PdfPTable table, String text, Font font, BaseColor backgroundColor ) {
        PdfPCell cell = new PdfPCell(new Phrase(text, font));
        cell.setBackgroundColor(backgroundColor);
        cell.setPadding(8);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        table.addCell(cell);
    }

    private void addTableCell ( PdfPTable table, String text, Font font, BaseColor backgroundColor ) {
        PdfPCell cell = new PdfPCell(new Phrase(text, font));
        cell.setBackgroundColor(backgroundColor);
        cell.setPadding(6);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        table.addCell(cell);
    }
}